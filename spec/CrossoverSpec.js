// Generated by CoffeeScript 1.7.1
(function() {
  describe("Crossover", function() {
    var dad, mom;
    mom = void 0;
    dad = void 0;
    beforeEach(function() {
      mom = new Individual();
      return dad = new Individual();
    });
    describe("one point crossover", function() {
      var onePoint;
      onePoint = void 0;
      beforeEach(function() {
        return onePoint = Crossover.onePoint(mom.genome, dad.genome);
      });
      it("should return a genome of correct length", function() {
        return expect(onePoint.length).toEqual(mom.genome.length);
      });
      return it("should return a genome containing the correct values", function() {
        return expect(onePoint).toMatch([1, 0]);
      });
    });
    describe("two point crossover", function() {
      var twoPoint;
      twoPoint = void 0;
      beforeEach(function() {
        return twoPoint = Crossover.twoPoint(mom.genome, dad.genome);
      });
      return it("should return a genome of correct length", function() {
        return expect(twoPoint.length).toEqual(mom.genome.length);
      });
    });
    return describe("uniform crossover", function() {
      var uniform;
      uniform = void 0;
      beforeEach(function() {
        return uniform = Crossover.uniform(mom.genome, dad.genome);
      });
      return it("should return a genome of correct length", function() {
        return expect(uniform.length).toEqual(mom.genome.length);
      });
    });
  });

}).call(this);

//# sourceMappingURL=CrossoverSpec.map
